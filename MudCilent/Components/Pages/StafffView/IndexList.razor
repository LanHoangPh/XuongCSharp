@page "/staffs"
@using AutoMapper
@using XuongCSharp.Import
@inject StaffsService StaffsService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject ExcelService ExcelService
@implements IDisposable

<div class="container-fluid">
    <PageTitle>HeHe</PageTitle>
    <h3 class="mt-4">Staffs Manager</h3>
    <MudDataGrid @ref="dataGrid" T="StaffDto" ServerData="ServerReload" Filterable="false" Style="margin: auto" RowClick="OpenUpdateDialog">
        <ToolBarContent>
            <MudButton Class="me-2" @onclick="CreateUser"
            StartIcon="@Icons.Material.Filled.PersonAddAlt1"
            Variant="Variant.Filled"
            Color="Color.Primary">
                Add New Satff

            </MudButton>
            <MudFileUpload Class="me-2" T="IBrowserFile" @ref="excelUpload" FilesChanged="UpLoadFile">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileExcel">
                        Upload Excel
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
            <MudButton Class="me-2" @onclick="ExportExcelTemplate"
                        StartIcon="@Icons.Material.Filled.Download"
                        Variant="Variant.Filled"
                        Color="Color.Info">
                Export Teamplate
            </MudButton>
            @* <MudButton Class="me-2" @onclick="ExportExcel" *@
            @*            StartIcon="@Icons.Material.Filled.Download" *@
            @*            Variant="Variant.Filled" *@
            @*            Color="Color.Info"> *@
            @*     Export Excel *@
            @* </MudButton> *@
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Name" Title="Name" />
            <PropertyColumn Property="x => x.StaffCode" Title="Mã Nhân Viên" />
            <PropertyColumn Property="x => x.AccountFe" />
            <PropertyColumn Property="x => x.AccountFpt" />
            <PropertyColumn Property="x => x.Status" Title="StaTus">
                <CellTemplate>
                    @if (context.Item.Status == 0)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Title="Hoạt động" />
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" Title="Không hoạt động" />
                    }
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.CreatedDate" Title="Created Date">
                <CellTemplate>
                    @(DateTimeOffset.FromUnixTimeMilliseconds(context.Item.CreatedDate).LocalDateTime.ToString("ddd MMM yyyy"))
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.LastModifiedDate" Title="LastModified Date">
                <CellTemplate>
                    @(DateTimeOffset.FromUnixTimeMilliseconds(context.Item.LastModifiedDate).LocalDateTime.ToString("ddd MMM yyyy"))
                </CellTemplate>
            </PropertyColumn>
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudButton Class="me-2" 
                    Variant="Variant.Filled" 
                    StartIcon="@Icons.Material.Filled.SwapHoriz" 
                    Color="Color.Info" 
                    OnClick="@(() => ToggleStaffStatusAsync(context.Item))"> 
                        Update Status
                    </MudButton>
                    <MudButton Class="me-2" 
                    Variant="Variant.Filled"
                    StartIcon="@Icons.Material.Filled.ViewHeadline"
                    Color="@Color.Secondary"
                    OnClick="@(() => ShowDetails(context.Item))">
                        Details </MudButton>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="StaffDto" />
        </PagerContent>
    </MudDataGrid>
</div>


@code {
    MudFileUpload<IBrowserFile> excelUpload;
    private ImportResultDto ImportResult { get; set; }

    MudDataGrid<StaffDto> dataGrid;
    string searchString = null;
    private readonly CancellationTokenSource cts = new();

    private async Task CreateUser()
    {
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall
            };

        var dialog = DialogService.Show<CreateStaffDialog>("Create Staff", options);
        var result = await dialog.Result;
        if (result is not null && !result.Canceled) await dataGrid.ReloadServerData();
    }
    private async Task OpenUpdateDialog(DataGridRowClickEventArgs<StaffDto> args)
    {
        if (cts.IsCancellationRequested) return;

        var updateStaffDto = new UpdateStaffDto{
                Name = args.Item.Name,
                StaffCode = args.Item.StaffCode,
                AccountFe = args.Item.AccountFe,
                AccountFpt = args.Item.AccountFpt,
                Status = args.Item.Status
        };
        var parameters = new DialogParameters
            {
                ["Staff"] = updateStaffDto,
                ["StaffId"] = args.Item.Id
            };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Small
            };

        var dialog = DialogService.Show<UpdateStaffDialog>("Cập nhật nhân viên", parameters, options);
        var result = await dialog.Result;
        if (result != null && !result.Canceled && !cts.IsCancellationRequested)
        {
            Snackbar.Add("Cập nhật nhân viên thành công", MudBlazor.Severity.Success);
            await dataGrid.ReloadServerData();
        }
    }
    private async Task ShowDetails(StaffDto staffDto){
        if (cts.IsCancellationRequested) return;

        var parameters = new DialogParameters
            {
                ["Staff"] = staffDto
            };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                CloseButton = true
            };

        var dialog = DialogService.Show<StaffDetailsDialog>("Quản lý bộ môn / chuyên ngành", parameters, options);
        await dialog.Result;
    }

    private async Task<GridData<StaffDto>> ServerReload(GridState<StaffDto> state)
    {
        IEnumerable<StaffDto> data = await StaffsService.GetAllStaffAsync();
        data = data.Where(element =>
         {
             if (string.IsNullOrWhiteSpace(searchString))
                 return true;
             if (element.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
                 return true;
             if (element.StaffCode?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
                 return true;
             if (element.AccountFe?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
                 return true;
             if (element.AccountFpt?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
                 return true;
             if ($"{element.Status}".Contains(searchString))
                 return true;

             return false;
         }).ToArray();
        var totalItems = data.Count();

        var sortDefinition = state.SortDefinitions.FirstOrDefault();
        if (sortDefinition != null)
        {
            switch (sortDefinition.SortBy)
            {
                case nameof(StaffDto.Name):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.Name
                    );
                    break;
                case nameof(StaffDto.StaffCode):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.StaffCode
                    );
                    break;
                case nameof(StaffDto.AccountFe):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.AccountFe
                    );
                    break;
                case nameof(StaffDto.AccountFpt):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.AccountFpt
                    );
                    break;
                case nameof(StaffDto.Status):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.Status
                    );
                    break;
            }
        }

        var pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new GridData<StaffDto>
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }

    private Task OnSearch(string text)
    {
        if (cts.IsCancellationRequested) return Task.CompletedTask;
        searchString = text;
        return dataGrid.ReloadServerData();
    }
    private async Task ToggleStaffStatusAsync(StaffDto staff)
    {
        var confirm = await DialogService.ShowMessageBox(
            "Xác nhận",
            $"Bạn có muốn đổi trạng thái nhân viên {staff.Name}?",
            yesText: "Có", cancelText: "Hủy");
        if (confirm == true)
        {
            try
            {
                var statusUpdateDto = new StaffStatusUpdateDto
                    {
                        Status = (byte)(staff.Status == 0 ? 1 : 0),
                        Reason = "Thay đổi trạng thái từ giao diện"
                    };
                var success = await StaffsService.UpdateStaffStatusAsync(staff.Id, statusUpdateDto);
                if (success)
                {
                    Snackbar.Add("Đổi trạng thái thành công", MudBlazor.Severity.Success);
                    await dataGrid.ReloadServerData();
                }
                else
                {
                    Snackbar.Add("Đổi trạng thái thất bại", MudBlazor.Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Lỗi: {ex.Message}", MudBlazor.Severity.Error);
            }
        }
    }
    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
    private async Task UpLoadFile(IBrowserFile file)
    {
        try
        {
            if (file == null)
            {
                Snackbar.Add("Vui lòng chọn file để import.", MudBlazor.Severity.Warning);
                return;
            }

            // Gọi StaffsService để đọc file Excel
            var staffs = await StaffsService.ReadExcelFileAsync(file);

            if (staffs == null || !staffs.Any())
            {
                Snackbar.Add("File không chứa dữ liệu nhân viên hợp lệ.", MudBlazor.Severity.Warning);
                return;
            }

            // Hiển thị dialog để người dùng xem và chỉnh sửa danh sách
            var parameters = new DialogParameters
        {
            { "Staffs", staffs },
            { "UserName", "admin" } // Thay bằng tên người dùng thực tế
        };
            var options = new DialogOptions { MaxWidth = MaxWidth.Medium, CloseButton = true };
            var dialog = await DialogService.ShowAsync<ImportExcelDialog>("Import Nhân Viên", parameters, options);
            var result = await dialog.Result;

            if (!result.Canceled && result.Data is bool success && success)
            {
                Snackbar.Add("Import nhân viên thành công.", MudBlazor.Severity.Success);
                await dataGrid.ReloadServerData();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi import file: {ex.Message}", MudBlazor.Severity.Error);
        }
    }
    private async Task ExportExcelTemplate()
    {
        try
        {
            var template = await StaffsService.GetImportTemplateAsync();
            using var streamRef = new DotNetStreamReference(new MemoryStream(template));
            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "EmployeeImportTemplate.xlsx", streamRef);
            Snackbar.Add("Tải mẫu Excel thành công.", MudBlazor.Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi: {ex.Message}", MudBlazor.Severity.Error);
        }
    }
    // private async Task ExportExcel()
    // {
    //     try
    //     {
    //         isLoading = true;
    //         var excelBytes = await StaffsService.GetExportExcel(searchString);
    //         if (excelBytes == null || excelBytes.Length == 0)
    //         {
    //             Snackbar.Add("Không có dữ liệu để xuất.", Severity.Warning);
    //             return;
    //         }

    //         using var streamRef = new DotNetStreamReference(new MemoryStream(excelBytes));
    //         await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "StaffsExport.xlsx", streamRef);
    //         Snackbar.Add("Xuất danh sách nhân viên thành công.", Severity.Success);
    //     }
    //     catch (Exception ex)
    //     {
    //         Snackbar.Add($"Lỗi khi xuất danh sách nhân viên: {ex.Message}", Severity.Error);
    //     }
    //     finally
    //     {
    //         isLoading = false;
    //     }
    // }
}