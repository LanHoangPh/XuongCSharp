@using MudBlazor
@inject StaffsService StaffsService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Chi tiết nhân viên: @Staff.Name</MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudText><strong>Tên:</strong> @Staff.Name</MudText>
            </MudItem>
            <MudItem xs="12">
                <MudText><strong>Mã nhân viên:</strong> @Staff.StaffCode</MudText>
            </MudItem>
            <MudItem xs="12">
                <MudText><strong>Tài khoản FE:</strong> @Staff.AccountFe</MudText>
            </MudItem>
            <MudItem xs="12">
                <MudText><strong>Tài khoản FPT:</strong> @Staff.AccountFpt</MudText>
            </MudItem>
            <MudItem xs="12">
                <MudText><strong>Trạng thái:</strong> @(Staff.Status == 1 ? "Hoạt động" : "Không hoạt động")</MudText>
            </MudItem>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddDepartmentMajor">
                    Thêm bộ môn / chuyên ngành
                </MudButton>
            </MudItem>
            <MudItem xs="12">
                <MudText Typo="Typo.h6">Danh sách bộ môn / chuyên ngành đã gán:</MudText>
                @if (Staff.Locations == null || !Staff.Locations.Any())
                {
                    <MudText>Chưa có bộ môn/chuyên ngành nào được gán.</MudText>
                }
                else
                {
                    <MudDataGrid Items="@Staff.Locations" SortMode="@SortMode.None" Filterable="false">
                        <Columns>
                            <PropertyColumn Property="x => x.FacilityName" Title="Cơ sở" />
                            <PropertyColumn Property="x => x.DepartmentName" Title="Phòng ban" />
                            <PropertyColumn Property="x => x.MajorName" Title="Chuyên ngành" />
                            <TemplateColumn CellClass="d-flex justify-end">
                                <CellTemplate>
                                    <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small"
                                               StartIcon="@Icons.Material.Filled.Delete"
                                               OnClick="@(() => RemoveDepartmentMajor(context.Item))">
                                        Remove
                                    </MudButton>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                    </MudDataGrid>
                }
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Color="Color.Secondary">Đóng</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public StaffDto Staff { get; set; }

    private async Task AddDepartmentMajor()
    {
        var parameters = new DialogParameters
            {
                ["StaffId"] = Staff.Id
            };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Small,
                CloseButton = true
            };

        var dialog = DialogService.Show<AddDepartmentDialog>("Thêm bộ môn / chuyên ngành", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshStaffData();
        }
        await RefreshStaffData();
    }

    private async Task RemoveDepartmentMajor(StaffLocationDto location)
    {
        try
        {
            // Hiển thị xác nhận trước khi xóa
            var confirm = await DialogService.ShowMessageBox(
                "Xác nhận",
                $"Bạn có chắc muốn xóa bộ môn/chuyên ngành {location.FacilityName} - {location.DepartmentName} {(location.MajorName != null ? $" - {location.MajorName}" : "")}?",
                yesText: "Có", cancelText: "Hủy");

            if (confirm != true)
            {
                return;
            }

            // Gọi API xóa bộ môn/chuyên ngành
            var success = await StaffsService.RemoveDepartmentMajorAsync(Staff.Id, location);
            if (success)
            {
                Snackbar.Add("Xóa bộ môn/chuyên ngành thành công.", Severity.Success);
                await RefreshStaffData();
            }
            else
            {
                Snackbar.Add("Xóa bộ môn/chuyên ngành thất bại.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi xóa bộ môn/chuyên ngành: {ex.Message}", Severity.Error);
        }
    }

    private async Task RefreshStaffData()
    {
        try
        {
            var updatedStaff = await StaffsService.GetStaffByIdAsync(Staff.Id);
            if (updatedStaff != null)
            {
                Staff = updatedStaff;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi làm mới dữ liệu nhân viên: {ex.Message}", MudBlazor.Severity.Error);
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}